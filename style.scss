/*
  Spring Blossom Scene - Competition SCSS Overhaul
  - Project by Mahdy Gribkov
  - A demonstration of advanced, CSS-only animation techniques.
  - Features a responsive layout, procedural animations, and a multi-layered parallax system.
*/

// =============================================================================
// SASS HELPERS & CONFIG
// =============================================================================

@use "sass:math";

// A utility function to generate a random number within a given range.
// This is used to create natural-looking variations in animations.
@function random-range($min, $max) {
  @return $min + math.random() * ($max - $min);
}

// =============================================================================
// CSS CUSTOM PROPERTIES (THEME & CONFIG)
// =============================================================================

:root {
  // Scene Colors - A soft, sakura-inspired palette.
  --sky-top: #b4c6e7;
  --sky-bottom: #fbc2eb;
  --sun-core: #fffde4;
  --sun-glow: rgba(255, 197, 143, 0.6);
  --mountain-color: #a3b1b7;
  --tree-trunk: #6f5f56;
  --tree-leaves: #8fbc8f;
  --ground-color: #98c9a3;
  --petal-color: #ffb3de;
  --scene-overlay-top: rgba(255, 182, 193, 0.1);
  --scene-overlay-bottom: rgba(230, 230, 250, 0.1);
  --footer-bg: #DE3163; // User-specified magenta
  --footer-text: #ffffff;

  // Bird Colors
  --sparrow-color: #9b7653;
  --robin-color: #c95c3d;
  --jay-color: #5d73b0;

  // Animation Timing
  --parallax-speed: 120s;
  --bird-flap-speed: 0.4s;
  --petal-fall-duration: 15s;

  // Layout variables
  --footer-height: 40px;
}

// =============================================================================
// CSS HOUDINI & ADVANCED PROPERTIES
// =============================================================================

// Registering a custom property to be used for trigonometric animations.
// This tells the browser that --bob-angle is an <angle> and can be animated smoothly.
@property --bob-angle {
  syntax: '<angle>';
  inherits: false;
  initial-value: 0deg;
}

// =============================================================================
// BASE & RESET
// =============================================================================

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body {
  height: 100%;
  width: 100%;
  overflow: hidden;
  font-family: 'Helvetica Neue', sans-serif;
  background: var(--sky-top);
}

.scene-container {
  width: 100%;
  height: 100%;
  position: relative;
  perspective: 800px;
  perspective-origin: center;
  padding-bottom: var(--footer-height);
}

.scene {
  width: 100%;
  height: 100%;
  position: relative;
  transform-style: preserve-3d;
}

// =============================================================================
// LOADING SCREEN
// =============================================================================

.loading-screen {
  position: absolute;
  top: 0;
  left: 0;
    width: 100%;
    height: 100%;
  background: white;
  z-index: 100;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  animation: hide-loader 1s ease-out 2s forwards;

  .loading-spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #f0f0f0;
    border-top-color: var(--petal-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 20px;
  }
  
  h3 { color: #333; margin-bottom: 10px; }
  p { color: #666; }
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

@keyframes hide-loader {
  to {
    opacity: 0;
    visibility: hidden;
  }
}

// =============================================================================
// UI - SCENE INFO & FOOTER
// =============================================================================

.scene-info {
    position: absolute;
  bottom: 60px;
  left: 20px;
  background: rgba(255, 255, 255, 0.85);
  backdrop-filter: blur(5px);
  padding: 15px 20px;
  border-radius: 10px;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
  z-index: 50;
  max-width: 280px;
  transition: transform 0.3s ease;

  &:hover {
    transform: scale(1.02);
  }

  h2 { font-size: 1.2em; color: #333; margin-bottom: 10px; }
  h3 { font-size: 1em; color: #555; margin-bottom: 8px; margin-top: 10px; }
  p { font-size: 0.9em; line-height: 1.4; color: #666; }
  ul { list-style: none; padding-left: 15px; }
  li { font-size: 0.9em; margin-bottom: 5px; color: #666; position: relative; }
  li::before {
    content: 'ðŸŒ¸';
  position: absolute;
    left: -20px;
    top: 0;
  }
}

.site-footer {
  position: absolute;
  bottom: 0;
  left: 0;
    width: 100%;
  padding: 10px;
  text-align: center;
  z-index: 50;
  background: var(--footer-bg);
  color: var(--footer-text);
  opacity: 0; // Start hidden
  animation: fade-in-footer 1s ease-out 2s forwards; // Sync with loader
  height: var(--footer-height);
  display: flex;
  align-items: center;
  justify-content: center;
  
  .hebrew {
    direction: rtl;
    unicode-bidi: bidi-override;
  }
}

@keyframes fade-in-footer {
  to {
    opacity: 1;
  }
}


// =============================================================================
// SCENE BACKGROUND & STATIC ELEMENTS
// =============================================================================

// The sky layer sits at the very back of the 3D scene.
.sky-layer {
  position: absolute;
  width: 100%;
  height: 100%;
  z-index: 1;

  .sky-gradient {
    width: 100%;
    height: 100%;
    background: linear-gradient(to bottom, var(--sky-top), var(--sky-bottom));
  }

  // A completely redesigned, non-geometric sun with multiple layers and animations.
  .sun {
  position: absolute;
    top: 10%;
    right: 15%;
    width: 100px; // Slightly smaller core
    height: 100px;
    background: radial-gradient(circle, var(--sun-core) 40%, transparent 70%);
    border-radius: 50%;
    animation: sun-pulse 12s infinite ease-in-out;
    transition: transform 0.5s ease;
    z-index: 2;
    
    &:hover {
      transform: scale(1.1);
    }
    
    // Soft outer glow - restored
    &::before {
      content: '';
      position: absolute;
      top: -25px;
      left: -25px;
      width: 150px;
      height: 150px;
      background: radial-gradient(circle, var(--sun-glow) 40%, transparent 70%);
      border-radius: 50%;
      opacity: 0.9;
      animation: sun-pulse 8s infinite alternate ease-in-out;
    }
  
    // Restored ::after for the definitive rays effect.
    &::after {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: conic-gradient(
        // Final, sharp, multi-ray implementation
        transparent 0deg 10deg, rgba(255,223,163,0.7) 10deg 18deg, transparent 18deg 35deg,
        transparent 35deg 45deg, rgba(255,223,163,0.6) 45deg 52deg, transparent 52deg 70deg,
        transparent 90deg 100deg, rgba(255,223,163,0.5) 100deg 108deg, transparent 108deg 120deg,
        transparent 160deg 170deg, rgba(255,223,163,0.7) 170deg 178deg, transparent 178deg 200deg,
        transparent 210deg 220deg, rgba(255,223,163,0.6) 220deg 228deg, transparent 228deg 240deg,
        transparent 270deg 280deg, rgba(255,223,163,0.5) 280deg 288deg, transparent 288deg 300deg,
        transparent 330deg 340deg, rgba(255,223,163,0.6) 340deg 348deg, transparent 348deg 360deg
      );
      border-radius: 50%;
      animation: sun-rays-rotate 45s infinite linear;
    }
  }
}

@keyframes sun-rays-rotate {
  to { transform: rotate(360deg); }
}

@keyframes sun-pulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.03); }
}

// Clouds are composed of multiple 'puffs' to create a fluffy, natural shape.
.cloud {
  position: absolute;
  animation: cloud-drift 80s linear infinite alternate;
  filter: blur(18px);
  
  .puff-1, .puff-2, .puff-3 {
    position: absolute;
    background: rgba(255,255,255,0.75);
    border-radius: 50%;
  }
  
  .puff-1 { width: 60px; height: 60px; top: 20px; transform: scale(0.9); }
  .puff-2 { width: 80px; height: 80px; left: 30px; transform: scale(1.1); }
  .puff-3 { width: 50px; height: 50px; top: 25px; left: 60px; transform: scale(0.8); }

  // Cloud positions and animation durations are varied for a more organic sky.
  &.cloud-1 { top: 10%; left: 15%; transform: scale(0.8); }
  &.cloud-2 { top: 20%; left: 80%; transform: scale(1); animation-duration: 120s; }
  &.cloud-3 { top: 25%; left: 40%; transform: scale(0.6); animation-duration: 90s; }
  &.cloud-4 { top: 5%; left: 50%; transform: scale(0.9); animation-duration: 100s; }
      }

@keyframes cloud-drift {
  from { transform: translateX(-50px) scale(var(--scale, 1)); }
  to   { transform: translateX(50px) scale(var(--scale, 1)); }
}


// =============================================================================
// PARALLAX SYSTEM
// =============================================================================

// Parallax layers move at different speeds to create a sense of depth.
// The animation is a very slow, subtle "breathing" motion.
// Layers are wider than the screen to prevent visible edges during movement.
.parallax-layer {
    position: absolute;
  top: 0;
  left: -10%;
  width: 120%;
  height: 100%;
  transform-style: preserve-3d;
  animation: parallax-scroll var(--parallax-speed) infinite alternate ease-in-out;
  z-index: 2;
}

// Pause the subtle parallax on hover to allow user-driven parallax to take over (if JS were added).
.scene-container:hover .parallax-layer {
  animation-play-state: paused;
}

// The 'translateZ' property is what creates the 3D depth.
// '--shift' controls how much each layer moves during the animation.
.layer-1 { transform: translateZ(-300px); --shift: 2%; }
.layer-2 { transform: translateZ(-150px); --shift: 4%; }
.layer-3 { transform: translateZ(-50px);  --shift: 4%; }
.layer-4 { transform: translateZ(0px);    --shift: 6%; }

// The animation uses the custom properties defined above.
@keyframes parallax-scroll {
  from { transform: translateX(calc(var(--shift) * -1)); }
  to   { transform: translateX(var(--shift)); }
  }

// CSS variables must be re-declared for use inside @keyframes.
.layer-1 { --translateZ: -300px; }
.layer-2 { --translateZ: -150px; }
.layer-3 { --translateZ: -50px;  }
.layer-4 { --translateZ: 0px;    }


// =============================================================================
// SCENE ELEMENTS
// =============================================================================

// Elements are placed on their respective parallax layers.
// Their appearance is adjusted based on distance (e.g., far trees are smaller).

// Mountains (Layer 1 - Farthest)
.mountain {
  position: absolute;
  bottom: 0;
  width: 40%;
  height: 50%;
  background: var(--mountain-color);
  clip-path: polygon(50% 0%, 0% 100%, 100% 100%);

  &.mountain-1 { left: 10%; bottom: 10%; width: 50%; height: 60%; opacity: 0.8; }
  &.mountain-2 { left: 55%; bottom: 5%; width: 45%; height: 55%; opacity: 0.9; }
}

// Trees (Layers 2, 3, 4)
.tree {
  position: absolute;
  bottom: 25%;
  transition: transform 0.5s ease;
  
  &:hover {
    transform: rotate(2deg) scale(1.02);
  }
  
  .trunk {
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
    background: var(--tree-trunk);
    }
  .leaves {
      position: absolute;
    bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
    background: var(--tree-leaves);
      border-radius: 50%;
    }
}

.tree--far {
  .trunk  { width: 8px; height: 40px; }
  .leaves { width: 40px; height: 40px; bottom: 35px; }
  &:nth-child(1) { left: 20%; transform: scale(0.7); }
  &:nth-child(2) { left: 75%; transform: scale(0.65); }
  &:nth-child(3) { left: 45%; transform: scale(0.75); }
  }
  
.tree--mid {
  .trunk  { width: 12px; height: 60px; }
  .leaves { width: 60px; height: 60px; bottom: 55px; }
  &:nth-child(1) { left: 10%; transform: scale(0.85); }
  &:nth-child(2) { left: 85%; transform: scale(0.9); }
}

.tree--near {
  .trunk  { width: 15px; height: 80px; }
  .leaves { width: 80px; height: 80px; bottom: 75px; }
  &:nth-child(1) { left: 5%; transform: scale(1); }
  &:nth-child(2) { left: 95%; transform: scale(1.05); }
  &:nth-child(3) { left: 30%; transform: scale(0.95); }
  &:nth-child(4) { left: 70%; transform: scale(1.1); }
  &:nth-child(5) { left: 50%; transform: scale(1); }
    }

// Ground (Layer 4 - Closest)
.ground {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 25%;
  background: var(--ground-color);
      }


// =============================================================================
// BIRD SYSTEM - ADVANCED
// =============================================================================

// The bird system is placed on its own layer to fly in front of the parallax background.
.bird-system {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  z-index: 3;
}

// The .bird element is now only a container for the flight path.
.bird {
  position: absolute;
  top: 50%;
  left: -10%;
  width: 25px;
  height: 20px;
  transform-style: preserve-3d;
  will-change: transform;
}

// The .bird__body handles all the fine motor animations: flapping, bobbing, and appearance.
.bird__body {
  width: 100%;
  height: 100%;
  position: absolute;
  
  // Apply the new vertical bob and the enhanced flap animation.
  // The bobbing speed is linked to the wing flap speed for realism.
  animation: 
    vertical-bob calc(var(--bird-flap-speed) * 2) infinite ease-in-out,
    flap var(--bird-flap-speed) infinite ease-in-out alternate;

  // The main body shape is defined by a clip-path.
  &::before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    // The clip-path will now be animated in the 'flap' keyframes.
    clip-path: polygon(0% 50%, 20% 0%, 100% 30%, 80% 100%, 20% 90%);
    background: currentColor;
    animation: inherit; // Inherit animation properties for the clip-path change
    animation-name: flap-body; // A separate animation just for the body shape
  }
  // The wing flaps independently using its own animation.
  &::after {
    content: '';
    position: absolute;
    top: 5px;
    left: 5px;
    width: 90%;
    height: 10px;
    background: currentColor;
    border-radius: 50%;
    transform-origin: 20% 50%;
    animation: inherit; // Inherits timing from parent .bird__body
  }
}

// New animation for lifelike vertical bobbing using sin()
@keyframes vertical-bob {
  from { --bob-angle: 0deg; }
  to   { --bob-angle: 360deg; }
}

// The flap animation is enhanced with more steps and a corresponding body animation.
@keyframes flap {
  from { transform: rotateZ(-20deg) scaleY(1) translateY(calc(sin(var(--bob-angle)) * -4px)); }
  to   { transform: rotateZ(20deg) scaleY(1.2) translateY(calc(sin(var(--bob-angle)) * -4px)); }
}

// A new, dedicated animation for the body's squash-and-stretch effect.
@keyframes flap-body {
  from {
    clip-path: polygon(0% 50%, 20% 10%, 100% 35%, 80% 100%, 20% 90%); // Slightly elongated
  }
  to {
    clip-path: polygon(0% 50%, 20% 0%, 100% 30%, 80% 95%, 20% 85%); // Slightly compressed
  }
}

// Modifier classes define the color for each bird species.
.bird--sparrow { color: var(--sparrow-color); }
.bird--robin   { color: var(--robin-color); }
.bird--jay     { color: var(--jay-color); }

// This SASS loop procedurally generates the flight animations.
// It assigns one of nine different flight paths (6 forward, 3 reversed)
// to each of the 40 birds, creating an incredibly complex and non-repetitive flock.
@for $i from 1 through 40 {
  .bird:nth-child(#{$i}) {
    $flight-duration: random-range(15, 30) * 1s; // Increase duration variance
    $flight-delay: random-range(0, 50) * -1s;   // Increase delay variance
    
    // Assign different paths to create a varied flock
    @if $i <= 30 {
      // The first 30 birds fly left-to-right using one of 6 paths
      $path-num: ($i % 6) + 1;
      animation: flight-path-#{$path-num} $flight-duration linear $flight-delay infinite;
    } @else {
      // The last 10 birds fly right-to-left using one of 3 reversed paths
      $path-num: (($i - 30) % 3) + 1;
      animation: flight-path-rev-#{$path-num} $flight-duration linear $flight-delay infinite;
    }
  }
}

// A library of complex, multi-point flight paths.
// They use 3D transforms to simulate banking and swooping.
@keyframes flight-path-1 { // Gentle Swoop
  0%   { transform: translate(0, -10vh) rotateZ(0deg); opacity: 0; }
  10%  { opacity: 1; }
  50%  { transform: translate(60vw, 5vh) rotateZ(15deg); } // Raised
  90%  { opacity: 1; }
  100% { transform: translate(110vw, -15vh) rotateZ(0deg); opacity: 0; } // Raised
}

@keyframes flight-path-2 { // Quick Dart
  0%   { transform: translate(0, 15vh) rotateZ(-10deg); opacity: 0; } // Raised
  10%  { opacity: 1; }
  40%  { transform: translate(50vw, 10vh) rotateZ(10deg); } // Raised
  70%  { transform: translate(80vw, 25vh) rotateZ(-15deg); } // Raised
  90%  { opacity: 1; }
  100% { transform: translate(110vw, 20vh) rotateZ(0deg); opacity: 0; } // Raised
}

@keyframes flight-path-3 { // High Arc
  0%   { transform: translate(0, 30vh) rotateZ(5deg); opacity: 0; } // Raised
  10%  { opacity: 1; }
  50%  { transform: translate(55vw, -30vh) rotateZ(20deg); } // Stays high
  90%  { opacity: 1; }
  100% { transform: translate(110vw, 5vh) rotateZ(-5deg); opacity: 0; } // Raised
}

@keyframes flight-path-4 { // Low, fast dash - now safely above ground
  0%   { transform: translate(0, 65vh) rotateZ(-5deg); opacity: 0; } // Raised
  10%  { opacity: 1; }
  30%  { transform: translate(40vw, 60vh) rotateZ(0deg); } // Raised
  70%  { transform: translate(80vw, 70vh) rotateZ(-10deg); } // Raised
  90%  { opacity: 1; }
  100% { transform: translate(110vw, 65vh) rotateZ(0deg); opacity: 0; } // Raised
}

@keyframes flight-path-5 { // Dramatic Dive
  0%   { transform: translate(0, -20vh) rotateZ(10deg); opacity: 0; }
  10%  { opacity: 1; }
  40%  { transform: translate(50vw, 40vh) rotateZ(-25deg); } // Raised dive
  90%  { opacity: 1; }
  100% { transform: translate(110vw, 30vh) rotateZ(5deg); opacity: 0; } // Raised
}

@keyframes flight-path-6 { // Meandering float
  0%   { transform: translate(0, 25vh) rotateZ(0deg); opacity: 0; } // Raised
  10%  { opacity: 1; }
  25%  { transform: translate(25vw, 35vh) rotateZ(15deg); } // Raised
  50%  { transform: translate(50vw, 25vh) rotateZ(-15deg); } // Raised
  75%  { transform: translate(75vw, 35vh) rotateZ(15deg); } // Raised
  90%  { opacity: 1; }
  100% { transform: translate(110vw, 25vh) rotateZ(0deg); opacity: 0; } // Raised
}

// Reversed flight paths for birds flying right-to-left.
@keyframes flight-path-rev-1 { // Reversed Gentle Swoop
  0%   { transform: translate(110vw, -15vh) rotateZ(0deg) scaleX(-1); opacity: 0; } // Raised
  10%  { opacity: 1; }
  50%  { transform: translate(50vw, 5vh) rotateZ(-15deg) scaleX(-1); } // Raised
  90%  { opacity: 1; }
  100% { transform: translate(-10vw, -25vh) rotateZ(0deg) scaleX(-1); opacity: 0; } // Raised
}
@keyframes flight-path-rev-2 { // Reversed Quick Dart
  0%   { transform: translate(110vw, 15vh) rotateZ(10deg) scaleX(-1); opacity: 0; } // Raised
  10%  { opacity: 1; }
  40%  { transform: translate(60vw, 10vh) rotateZ(-10deg) scaleX(-1); } // Raised
  70%  { transform: translate(30vw, 25vh) rotateZ(15deg) scaleX(-1); } // Raised
  90%  { opacity: 1; }
  100% { transform: translate(-10vw, 20vh) rotateZ(0deg) scaleX(-1); } // Raised
}
@keyframes flight-path-rev-3 { // Reversed High Arc
  0%   { transform: translate(110vw, 35vh) rotateZ(-5deg) scaleX(-1); opacity: 0; } // Raised
  10%  { opacity: 1; }
  50%  { transform: translate(55vw, -30vh) rotateZ(-20deg) scaleX(-1); } // Stays high
  90%  { opacity: 1; }
  100% { transform: translate(-10vw, 15vh) rotateZ(5deg) scaleX(-1); opacity: 0; } // Raised
}


// =============================================================================
// PETAL SYSTEM
// =============================================================================
.petal-system {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

// Background petals fall behind some scene elements.
.petal-system--bg {
  z-index: 2; // Same level as parallax layers
  transform: translateZ(-250px); // Pushed far back, behind trees
}

// Foreground petals fall in front of everything.
.petal-system--fg {
  z-index: 4; // Same as before
}

// Each petal's animation is procedurally generated for a chaotic, natural look.
.petal {
    position: absolute;
  top: -10%;
  left: 0;
  width: 12px;
  height: 12px;
  background: var(--petal-color);
  border-radius: 10% 50%;
  will-change: transform;
}

// SASS loop for both petal systems
@mixin generate-petals($count, $y-min, $y-max) {
  @for $i from 1 through $count {
    .petal:nth-child(#{$i}) {
      $fall-duration: random-range(12, 28) * 1s;
      // Stagger animations over 2 minutes for a continuous, non-repetitive effect
      $fall-delay: random-range(0, 120) * 1s; 
      $x-start: random-range(0, 100) * 1vw;
      $x-end-drift: random-range(-200, 200) * 1px;
      $rotation: random-range(-720, 720) * 1deg;
      $y-end: calc(#{random-range($y-min, $y-max)}vh - var(--footer-height));

      left: $x-start;
      // Reverted to an infinite loop with a new multi-stage keyframe animation.
      animation: petal-fall $fall-duration linear $fall-delay infinite;
      
      --x-end: calc(#{$x-start} + #{$x-end-drift});
      --y-end: #{$y-end};
      --rotation: #{$rotation};
    }
  }
}

// Background petals need to travel "further" down the screen due to perspective.
.petal-system--bg { @include generate-petals(100, 110, 130); }
// Foreground petals have a normal landing trajectory.
.petal-system--fg { @include generate-petals(100, 75, 95); }

@keyframes petal-fall {
  // Petals now fall, rest, and fade out before the animation loops.
  0% {
    transform: translateY(-10vh) translateX(0) rotate(0);
    opacity: 1;
  }
  80% {
    transform: translateY(var(--y-end)) translateX(var(--x-end)) rotate(var(--rotation));
    opacity: 0.7; // Land and rest on the ground.
  }
  100% {
    transform: translateY(var(--y-end)) translateX(var(--x-end)) rotate(var(--rotation));
    opacity: 0; // Fade out completely before looping.
  }
}


// =============================================================================
// SCENE OVERLAY
// =============================================================================

// A subtle gradient overlay to unify the scene's color palette.
.scene::after {
  content: '';
    position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(to bottom, var(--scene-overlay-top), var(--scene-overlay-bottom));
  z-index: 5;
  pointer-events: none;
}

// =============================================================================
// RESPONSIVE DESIGN
// =============================================================================

// On smaller screens, the layout is adjusted and the number of animated
// elements is reduced to ensure smooth performance.
@media (max-width: 768px) {
  // Hide the info panel entirely on tablets and smaller devices.
  .scene-info {
    display: none;
  }

  // Reduce number of birds on mobile for performance.
  .bird:nth-child(n+20) { display: none; } // Reduce to 20 birds
  .petal:nth-child(n+50) { display: none; } // Reduce to 50 petals per layer
}

// On very small screens, hide the info panel entirely to prioritize the scene.
@media (max-width: 480px) {
  // Rule for .scene-info is already covered by the 768px query.
  // Further reduce elements for performance on the smallest devices.
  .bird:nth-child(n+10) { display: none; }
  .petal:nth-child(n+25) { display: none; } // Reduce to 25 petals per layer
} 